{"version":3,"sources":["pics/rainy.svg","pics/clear-day.svg","pics/clear-night.svg","pics/cloudy-day.svg","pics/cloudy-night.svg","pics/snowy.svg","pics/thunder.svg","components/header.jsx","components/weather-card-component.jsx","components/weather.jsx","components/Forecast.jsx","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","DT","Date","state","clock","toLocaleString","substring","amPM","greeting","greet","react_default","a","createElement","date","getHours","_this2","setInterval","setState","replace","React","Component","WC","className","getWeekDay","dayProp","class","id","getDate","setTemp","forecastProp","src","setIcon","alt","dayNum","day","parseInt","today","daily","addDays","getMonth","getDay","days","newDate","setDate","json","length","item","format","dateString","list","dt_txt","valueOf","icon","weather","main","cNight","cDay","cloudyN","cloudyD","rainy","thunder","snowy","Math","round","temp","month","toString","getFullYear","Weather","call_type","city","data","input","bind","assertThisInitialized","submit","event","value","target","alert","preventDefault","apiKey","process","window","location","protocol","fetch","concat","then","response","onSubmit","type","placeholder","name","onChange","weather_card_component","ReactDOM","render","header","document","getElementById","components_weather"],"mappings":"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","file":"static/js/main.e9e1ccff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rainy.d235ab65.svg\";","module.exports = __webpack_public_path__ + \"static/media/clear-day.7f93fbdb.svg\";","module.exports = __webpack_public_path__ + \"static/media/clear-night.a3f3f38d.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy-day.80a5d865.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy-night.ef1c6aa1.svg\";","module.exports = __webpack_public_path__ + \"static/media/snowy.67d63a14.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunder.7142c78b.svg\";","import React from 'react';\r\nimport greet from 'greeting-time';\r\n\r\nclass Header extends React.Component{\r\n    //var hello = greet(new Date());\r\n    constructor(props){\r\n        super(props);\r\n\r\n            var DT = new Date();\r\n        this.state = { //setting intial state\r\n            clock: DT.toLocaleString().substring(11,16) + this.amPM(DT),\r\n            greeting: greet(DT)\r\n        }\r\n    }\r\n   \r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>{this.state.greeting}</h1>{/*greeting*/}\r\n                <h3>{this.state.clock}</h3>{/*time*/}\r\n            </div>\r\n        );\r\n    }\r\n    milconversion(date){\r\n        return (date.getHours() + 24) % 12 || 12;\r\n    }\r\n    amPM(date){\r\n        if(date.getHours() < 12){return ' AM';}\r\n        if(date.getHours() >= 12){return ' PM';}\r\n    }\r\n\r\n    componentDidMount(){//updating clock every 10 seconds and greeting every 30min\r\n        setInterval( () => {\r\n            this.setState({\r\n              clock : ((new Date()).toLocaleString().substring(11,16)).replace(/:$/ , \"\") + this.amPM(new Date())\r\n            })\r\n          },1000)\r\n        \r\n          setInterval( () => {\r\n            this.setState({\r\n              greeting: greet(new Date())\r\n            })\r\n          },1800000 )\r\n    }\r\n}\r\n\r\nexport default Header;\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport greet from 'greeting-time';\r\n\r\n//weather icons\r\nimport rainy from '../pics/rainy.svg';\r\nimport cDay from '../pics/clear-day.svg';\r\nimport cNight from '../pics/clear-night.svg';\r\nimport cloudyD from '../pics/cloudy-day.svg';\r\nimport cloudyN from '../pics/cloudy-night.svg';\r\nimport snowy from '../pics/snowy.svg';\r\nimport thunder from '../pics/thunder.svg';\r\n// import { rainy, cDay, cNight, cloudyD, cloudyN, tStorm, snow} from '../components/icon';\r\n\r\n//a component is an independent, reusable cod block\r\n  //divides the UI into smaller pieces ~ lego blocks\r\n\r\n//the simplest way to define a component is to write a function\r\n//use a function over a class if the component doesn't do much\r\n//if components need more functionality like keeping states use a class\r\n  //state = part of an app that can change\r\n\r\n//function = stateless components\r\n//class = stateful components\r\n\r\nclass WC extends React.Component{//React.Component subclass\r\n  //the only method you must define is render\r\n  \r\n  render(){\r\n    return (\r\n      <div className=\"weather-card\">\r\n        <h1>{this.getWeekDay(this.props.dayProp)}</h1>\r\n         <h2 class=\"date\" id=\"day\">{this.getDate(this.props.dayProp)}</h2>\r\n            <div class=\"icon\">\r\n               <span className=\"weather-icon\"></span>\r\n            </div>\r\n            <div class=\"temp\">\r\n                <div class=\"temperature\"><span>Temp:</span>{this.setTemp(this.props.dayProp, this.props.forecastProp)}<span>Â°</span></div>\r\n            </div>\r\n               <div class=\"icon\">\r\n                  <img src={this.setIcon(this.props.dayProp, this.props.forecastProp)} alt=\"weather icon\"/>\r\n            </div>\r\n      </div>\r\n    );\r\n  }\r\n  //additional methods\r\n  getDate(dayNum){//returns the date\r\n    //expected input: day0, day1, day2,....day4\r\n    var day = parseInt(dayNum.substring(3,4), 10);\r\n    var today = new Date();\r\n    var daily = this.addDays(today,day);\r\n\r\n    return (daily.getMonth()+1) + \"/\" + (daily.getDate());\r\n    // getMonth is 0 based indexing\r\n  }\r\n\r\n  getWeekDay(dayNum){//returns the day of the week\r\n    var days = [\"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\"];\r\n    var day = parseInt(dayNum.substring(3,4), 10);//day0, day1,...\r\n    var today = new Date();\r\n    var daily = this.addDays(today,day);\r\n    var x = daily.getDay();\r\n\r\n    return days[x];\r\n  }\r\n\r\n  addDays(date, days){//for daily increment\r\n    var newDate = new Date(date);\r\n    newDate.setDate(newDate.getDate() + days);\r\n    return newDate;\r\n  }\r\n\r\n  setIcon(day,json){//change weather icons\r\n    if(!(json.length < 1 )){\r\n      var item = 0;\r\n      var daily = this.addDays(new Date(), parseInt(day.substring(3,4), 10))\r\n      var format = this.dateString(daily)\r\n      \r\n       //day increment\r\n       while (json.list[item].dt_txt.substring(0, 10).valueOf() === format) {\r\n        item++;\r\n       }\r\n      var weather = json.list[item].weather[0].main;\r\n      var icon;\r\n      switch(weather){\r\n          case 'Clear':\r\n            if( greet(new Date()) === 'Good evening' ){\r\n              icon = cNight;\r\n            }else{\r\n              icon = cDay;\r\n            }\r\n            break;\r\n  \r\n          case 'Clouds':\r\n              if( greet(new Date()) === 'Good evening' ){\r\n                icon = cloudyN;\r\n              }else{\r\n                icon = cloudyD;\r\n              }\r\n              break;\r\n          \r\n          case 'Rain':\r\n          case 'Drizzle':\r\n          case 'Mist':\r\n            icon = rainy;\r\n            break;\r\n          \r\n          case 'Thunderstorm':\r\n            icon = thunder;\r\n            break;\r\n  \r\n          case 'Snow':\r\n            icon = snowy;\r\n            break;\r\n  \r\n          default:\r\n            break;\r\n      }\r\n          return icon;\r\n    }     \r\n  }\r\n\r\n  setTemp(day, json){//set temperature\r\n      if(!(json.length < 1 )){\r\n        var item = 0;\r\n        var daily = this.addDays(new Date(), parseInt(day.substring(3,4), 10))\r\n        var format = this.dateString(daily)\r\n        \r\n         //day increment\r\n         while (json.list[item].dt_txt.substring(0, 10).valueOf() === format) {\r\n          item++;\r\n         }\r\n         return (Math.round(json.list[item].main.temp))\r\n      }\r\n      }\r\n\r\n      //\r\n  \r\n  dateString(date) {\r\n  //Date Formatter ~ takes in date and returns string format\r\n  //similar to openweahterapi JSON date format\r\n    var month;\r\n    var day;\r\n    if ((date.getMonth() + 1).toString().length === 1) {\r\n        month = 0 + '' + (date.getMonth() + 1);\r\n    } else {\r\n        month = '' + (date.getMonth() + 1);\r\n    }\r\n\r\n    if ((date.getDate() + 1).toString().length === 1) {\r\n        day = 0 + '' + (date.getDate());\r\n    } else {\r\n        day = '' + (date.getDate());\r\n    }\r\n    var DateString = date.getFullYear() + '-' + month + '-' + day;\r\n    return DateString;\r\n  }\r\n\r\n  // componentDidUpdate(prevProps, prevState){//update version of componentDidMount\r\n  //     if(prevProps.forecastProp !== prevState.data){\r\n  //       this.setState({\r\n  //         temp: 'it changed'\r\n  //       })\r\n  //     }\r\n  // }\r\n  \r\n\r\n\r\n}//class end\r\n\r\nexport default WC;","import React from 'react';\r\nimport Forecast from './Forecast';\r\nimport WC from './weather-card-component';\r\n\r\n\r\n//API key\r\n// console.log(process.env.REACT_APP_WEATHER_KEY);\r\n\r\n// const apiID = '0d3ff1f2a2f60e0f3aa9afc043509206';\r\n\r\nclass Weather extends React.Component{//React.Component subclass\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            call_type: 'q',\r\n            city: '',\r\n            data: ''\r\n        }\r\n        this.input = this.input.bind(this);\r\n        this.submit = this.submit.bind(this)\r\n    }\r\n\r\n    input(event){//handles user input\r\n        this.setState({value: event.target.value});\r\n    }\r\n\r\n    submit(event){\r\n        alert('it worked ' + this.state.value);\r\n        event.preventDefault();//prevents page from reloading\r\n   \r\n        const apiKey = process.env.REACT_APP_WEATHER_KEY;\r\n        // const call = axios.get(`http://api.openweathermap.org/data/2.5/forecast?${this.state.call_type}=${this.state.city}&appID=${apiKey}&units=imperial`);\r\n        // var JSON = call.json();\r\n        if (window.location.protocol === 'http:') {\r\n            fetch(`http://api.openweathermap.org/data/2.5/forecast?${this.state.call_type}=${this.state.value}&appID=${apiKey}&units=imperial`).then(function (response) {\r\n                return response.json();\r\n            }).then(response => {\r\n                this.setState({data: response})\r\n            });\r\n        } else {\r\n            fetch(`https://api.openweathermap.org/data/2.5/forecast?${this.state.call_type}=${this.state.value}&appID=${apiKey}&units=imperial`).then(function (response) {\r\n                return response.json();\r\n            }).then(response => {\r\n                this.setState({data: response})\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    //the only method you must define is render\r\n    render(){//mounting occurs\r\n      return (\r\n          <div className='weather-board'>\r\n                <div className='search-bar'>\r\n                    <h3>How's the weather in your city</h3>\r\n                    <form className=\"search-bar\" onSubmit={this.submit}>\r\n                        <input type=\"text\" placeholder='City or Zip' name='city' value={this.state.value} onChange={this.input}/>\r\n                        <button id='search' type='submit' value='submit' className='btn btn-primary'>Let's See</button>\r\n                    </form>\r\n                </div>\r\n\r\n                <div className='weather-cards'>\r\n                    <WC dayProp='day0' forecastProp={this.state.data}></WC>\r\n                    <WC dayProp='day1' forecastProp={this.state.data}></WC>\r\n                    <WC dayProp='day2' forecastProp={this.state.data}></WC>\r\n                    <WC dayProp='day3' forecastProp={this.state.data}></WC>\r\n                    <WC dayProp='day4' forecastProp={this.state.data}></WC>\r\n                    \r\n                 </div>\r\n                \r\n                \r\n          </div>\r\n        \r\n      );\r\n    }\r\n\r\n     //additional methods ~ API methods in the search components\r\n    //\r\n    //information passed to the weather-card component\r\n   \r\n   \r\n    \r\n    // call a function when button is clicked\r\n\r\n\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport WC from './weather-card-component';\r\n\r\nclass Forecast extends React.Component{//React.Component subclass\r\n    //the only method you must define is render\r\n    render(){\r\n      return (\r\n       <div className=\"weather-board\">\r\n          <div className='weather-cards'>\r\n              <WC dayProp='day0'></WC>\r\n              <WC dayProp='day1'></WC>\r\n              <WC dayProp='day2'></WC>\r\n              <WC dayProp='day3'></WC>\r\n              <WC dayProp='day4'></WC>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n  //parsing weather forecast data\r\n  //parsing temp and weather icon for each day\r\n    \r\n\r\n\r\n}\r\n\r\nexport default Forecast;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/main.css';\n\n\n//importing components\nimport Header from './components/header';\nimport Weather from './components/weather';\n//rendering components\n//header\nReactDOM.render(<Header/>, document.getElementById('hello'));\n//Weather board\nReactDOM.render(<Weather/>, document.getElementById('app'));\n\n"],"sourceRoot":""}